<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[0xklx]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://k-research.net/"/>
  <updated>2014-11-25T01:29:45.894Z</updated>
  <id>http://k-research.net/</id>
  
  <author>
    <name><![CDATA[Kong Luoxing]]></name>
    <email><![CDATA[kong.luoxing@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Notes of Cobbler]]></title>
    <link href="http://k-research.net/2014/11/21/cobbler-notes/"/>
    <id>http://k-research.net/2014/11/21/cobbler-notes/</id>
    <published>2014-11-21T12:30:25.000Z</published>
    <updated>2014-11-21T12:48:30.000Z</updated>
    <content type="html"><![CDATA[]]></content>
    <summary type="html">
    <![CDATA[Cobbler 心得]]>
    
    </summary>
    
      <category term="provisioning" scheme="http://k-research.net/tags/provisioning/"/>
    
      <category term="cobbler" scheme="http://k-research.net/tags/cobbler/"/>
    
      <category term="Linux" scheme="http://k-research.net/tags/Linux/"/>
    
      <category term="Provisioning" scheme="http://k-research.net/categories/Provisioning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Notes of Razor]]></title>
    <link href="http://k-research.net/2014/11/21/razor-notes/"/>
    <id>http://k-research.net/2014/11/21/razor-notes/</id>
    <published>2014-11-21T12:30:25.000Z</published>
    <updated>2014-11-23T12:48:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p><a href="http://puppetlabs.com/solutions/next-generation-provisioning" target="_blank" rel="external">Razor</a>最早是由EMC开源出来的，后由puppet和EMC共同开发，现在是puppetlabs下的一个项目。Puppet介绍Razor为Next-Generation provisioning工具。的确，Razor与上一代（Cobbler、Crowbar etc）的provisioning工具皆大有不同。它的亮点功能有：</p>
<ul>
<li>Auto-Discovered Real-Time Inventory Data(实时自动发现)</li>
<li>Dynamic Image Selection(动态镜像选择)</li>
<li>Policy-Based Provisioning(基于策略的装机)</li>
<li>Open APIs and Plug-in Architecture(开放API和插件架构)
以下我们来一一看看它的这些亮点。</li>
</ul>
<h1 id="Real-Time_Auto_Discovery">Real-Time Auto Discovery</h1>
<h1 id="Dynamic_Image_Selection">Dynamic Image Selection</h1>
<h1 id="Policy-Based_Provisioning">Policy-Based Provisioning</h1>
<h1 id="Open_APIs_and_Plug-in_Architecture">Open APIs and Plug-in Architecture</h1>
<h1 id="总结">总结</h1>
]]></content>
    <summary type="html">
    <![CDATA[Razor-Server 使用心得]]>
    
    </summary>
    
      <category term="provisioning" scheme="http://k-research.net/tags/provisioning/"/>
    
      <category term="razor" scheme="http://k-research.net/tags/razor/"/>
    
      <category term="Provisioning" scheme="http://k-research.net/categories/Provisioning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自动装机需求分析]]></title>
    <link href="http://k-research.net/2014/11/18/auto_install/"/>
    <id>http://k-research.net/2014/11/18/auto_install/</id>
    <published>2014-11-18T07:30:22.000Z</published>
    <updated>2014-11-25T01:23:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基本概念">基本概念</h1>
<p><strong>Node</strong></p>
<p>一个节点就是一台主机，节点包含其配置信息，以及日志等</p>
<p><strong>Repo</strong></p>
<p>仓库定义了安装文件的来源（iso http），安装的过程（task），系统预置了一些task，如CentOS，Ubuntu，Windows2012等。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="code">+------------+</span>-----------------------------------------------------------------------------<span class="code">+-----+</span>--------+</div><div class="line"><span class="header">| name       | iso_url                                                                     | url | task   |</span></div><div class="line">+------------+-----------------------------------------------------------------------------+-----+--------+</div><div class="line">| centos-6.2 | file:///data/CentOS-6.2-x86<span class="emphasis">_64-bin-DVD1.iso                                 | --- | centos |</span></div><div class="line">| centos-6.4 | http://mirrors.163.com/centos/6.6/isos/x86_64/CentOS-6.6-x86<span class="emphasis">_64-minimal.iso | --- | centos |</span></div><div class="line">+------------+-----------------------------------------------------------------------------+-----+--------+</div></pre></td></tr></table></figure>

<p><strong>Tag</strong></p>
<p>标签，用于组织和管理设备，使其方便检索，一个主机可以拥有一个或多个标签。标签对象包含一个名字和一个规则，规则使主机对象可以据此进行匹配。ex：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+------+----------------------------------------------------+-------+----------+</div><div class="line"><span class="localvars">| name | rule                                               | nodes | policies |</span></div><div class="line">+------+----------------------------------------------------+-------+----------+</div><div class="line"><span class="localvars">| test |</span> [<span class="comment">"="</span>, [<span class="comment">"fact"</span>, <span class="comment">"macaddress"</span>], <span class="comment">"00:0c:29:c3:53:f0"</span>] | <span class="number">1</span>     | <span class="number">1</span>        |</div><div class="line">+------+----------------------------------------------------+-------+----------+</div></pre></td></tr></table></figure>

<p>以上规则使MAC地址为00:0c:29:c3:53:f0的主机，会匹配此标签规则，被打上test的标签。</p>
<p>详细规则见此链接：<a href="https://github.com/puppetlabs/razor-server/wiki/Tags" target="_blank" rel="external">标签</a></p>
<p><strong>Policy</strong></p>
<p>策略，用于将Tag、broker、repo等捆绑到一起，使其组成一个完整的策略，可以描述一个场景：
给标签为xx的主机，安装repo所描述的系统，系统装完后安装xx broker。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="code">+-------------+</span>------------<span class="code">+--------+</span>--------<span class="code">+---------+</span>-----------<span class="code">+------+</span>-------+</div><div class="line"><span class="header">| name        | repo       | task   | broker | enabled | max_count | tags | nodes |</span></div><div class="line">+-------------+------------+--------+--------+---------+-----------+------+-------+</div><div class="line"><span class="header">| test_policy | centos-6.2 | centos | puppet | true    | 20        | test | 1     |</span></div><div class="line">+-------------+------------+--------+--------+---------+-----------+------+-------+</div></pre></td></tr></table></figure>

<h1 id="功能需求">功能需求</h1>
<h2 id="自动发现界面">自动发现界面</h2>
<p>菜单位于：生命周期管理-&gt;自动发现</p>
<p><strong>业务逻辑</strong></p>
<p>当机器上架后，机器应当已经加电，理想情况此时应当开机。开机后系统即可自动发现该主机，及其配置信息，此时可对发现的机器，进行配置核对。</p>
<p><strong>界面功能</strong></p>
<p>界面展示自动发现的机器，显示为一个列表，并展示以下字段：名称、CI ID、dhcp mac、dhcp ip、status、last checkin、tags、CPU count、memory、virtual、policy
第一排序字段为status，<code>未装机</code>在前，第二排序字段为last_checkin:
<img src="http://kongluoxing.qiniudn.com/discovery_list.png" alt="自动发现列表">
界面可配置每x秒自动刷新。数据取自数据库，后台跑定时任务将数据从razor导入到数据库。</p>
<p><strong>列表逻辑</strong></p>
<ul>
<li>列表中status为<code>已装机</code>和<code>未开机</code>的主机，禁用选择框。其中已装机和未装机的数据来自于razor，而未开机的数据则来自于CMDB中存在，然而未能在自动发现中匹配的机器。</li>
<li>点击操作列的日志显示一个弹出层展示日志信息</li>
<li>CI ID是机器自动关联到CMDB后，展示的CI ID，CI ID要可以点击转向CMDB页面</li>
<li>virtual字段在机器为物理机的时候显示No，在机器为虚拟机的时候显示对应的虚拟化技术</li>
<li>单选或多选底部均弹出工具栏，详见webarch，工具栏显示一个按钮：开始装机，点击后弹出层显示向导</li>
</ul>
<p><strong>装机向导</strong></p>
<p>向导使用webarch控件:
<img src="http://kongluoxing.qiniudn.com/form_wizard.png" alt="向导控件"></p>
<p>装机向导总共分以下几步：</p>
<ol>
<li>标题：创建批次号 系统自动生成一个批次号，用户确认后进行下一步</li>
<li>标题：创建装机策略 包含几个文本框输入：名字（自动生成，批次号+标示符），操作系统：下拉框选择，主机名策略：默认node${id}，root密码：随机字符串（按照一定规则生成），应用于标签：自动带入批次号</li>
<li>标题，完成，提示用户关注自动发现列表中tag和policy列的变化，另外可查看日志</li>
</ol>
<h2 id="装机策略管理">装机策略管理</h2>
<p>菜单位于：生命周期管理-&gt;装机策略管理</p>
<p><strong>业务逻辑</strong></p>
<p>用于增删改标签、仓库、策略。自动发现界面所创建的标签和策略都是临时使用的，用于手动安装一批机器，这里创建的标签和策略等则是永久存在的，其意义在于无人工介入的情况下进行自动分类和装机。
例如自动给戴尔的机器增加dell的tag，自动给虚拟机增加vm的tag等。而仓库则是预设的一些操作系统镜像等。策略在数据中心高度统一化的时候意义重大，它可以实现机器上架、开机就立即进行定制化装机，
而不需要人工介入。例如自动给戴尔机器安装戴尔定制操作系统。在现阶段不推荐自动安装，推荐在自动发现界面使用装机向导安装。</p>
<p><strong>界面功能</strong></p>
<p>左边显示三个列表：标签规则、镜像仓库、装机策略</p>
<h3 id="标签规则">标签规则</h3>
<p>显示以下表格：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+------+----------------------------------------------------+-------+----------+</div><div class="line"><span class="localvars">| name | rule                                               | nodes | policies |</span></div><div class="line">+------+----------------------------------------------------+-------+----------+</div><div class="line"><span class="localvars">| test |</span> [<span class="comment">"="</span>, [<span class="comment">"fact"</span>, <span class="comment">"macaddress"</span>], <span class="comment">"00:0c:29:c3:53:f0"</span>] | <span class="number">1</span>     | <span class="number">1</span>        |</div><div class="line">+------+----------------------------------------------------+-------+----------+</div></pre></td></tr></table></figure>

<p>顶部显示创建标签规则按钮，点击弹出框，用户需填入name和rule，点击确定完成创建。</p>
<h3 id="镜像仓库">镜像仓库</h3>
<p>显示以下表格</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+------------+-----------------------------------------------------------------------------+-----+--------+-----------+</div><div class="line"><span class="localvars">| name       | iso_url                                                                     | url | task   | status    |</span></div><div class="line">+------------+-----------------------------------------------------------------------------+-----+--------+-----------+</div><div class="line">| centos-<span class="number">6.2</span> | <span class="method">file:</span>///data/<span class="class">CentOS</span>-<span class="number">6.2</span>-x86_64-bin-<span class="class">DVD1</span>.iso                                 | --- <span class="localvars">| centos | complete  |</span></div><div class="line">| centos-<span class="number">6.4</span> | <span class="method">http:</span>//mirrors<span class="number">.163</span>.com/centos/<span class="number">6.6</span>/isos/x86_64/<span class="class">CentOS</span>-<span class="number">6.6</span>-x86_64-minimal.iso | --- <span class="localvars">| centos | pending   |</span></div><div class="line">+------------+-----------------------------------------------------------------------------+-----+--------+-----------+</div></pre></td></tr></table></figure>

<p>顶部显示创建镜像仓库按钮，用户需填写name，iso_url和task(下拉框)完成创建。</p>
<h3 id="装机策略">装机策略</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="code">+-------------+</span>------------<span class="code">+--------+</span>--------<span class="code">+---------+</span>-----------<span class="code">+------+</span>-------+</div><div class="line"><span class="header">| name        | repo       | task   | broker | enabled | max_count | tags | nodes |</span></div><div class="line">+-------------+------------+--------+--------+---------+-----------+------+-------+</div><div class="line"><span class="header">| test_policy | centos-6.2 | centos | puppet | true    | 20        | test | 1     |</span></div><div class="line">+-------------+------------+--------+--------+---------+-----------+------+-------+</div></pre></td></tr></table></figure>

<p>顶部显示创建装机策略按钮，用户需填写name，选择repo，择填写tags完成创建。</p>
]]></content>
    <summary type="html">
    <![CDATA[上架及自动装机需求分析]]>
    
    </summary>
    
      <category term="provisioning" scheme="http://k-research.net/tags/provisioning/"/>
    
      <category term="lifecycle" scheme="http://k-research.net/tags/lifecycle/"/>
    
      <category term="out-of-band" scheme="http://k-research.net/tags/out-of-band/"/>
    
      <category term="datacenter" scheme="http://k-research.net/tags/datacenter/"/>
    
      <category term="razor" scheme="http://k-research.net/tags/razor/"/>
    
      <category term="Provisioning" scheme="http://k-research.net/categories/Provisioning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据中心服务器生命周期管理]]></title>
    <link href="http://k-research.net/2014/11/18/lifecycle-management/"/>
    <id>http://k-research.net/2014/11/18/lifecycle-management/</id>
    <published>2014-11-18T07:30:22.000Z</published>
    <updated>2014-11-24T14:44:27.000Z</updated>
    <content type="html"><![CDATA[<p>英文标题：Data Center Server Lifecycle Management</p>
<p>首先我定义生命周期包含几个阶段：服务开通-&gt;交付、维护-&gt;下架
这里所指的服务开通，指的是服务器从上架到交付使用的全过程。</p>
<h1 id="概述">概述</h1>
<p>服务开通由几个步骤组成：上架-&gt;初始配置-&gt;信息登记-&gt;自动装机-&gt;交付。</p>
<p><strong>上架</strong>指专门人员（通常指<a href="http://beijing.myjob.com/job/11-15240822.html" target="_blank" rel="external">Siteops</a>）将指定设备放置到指定机架位置上，并加电，连接好网线；<br><strong>初始配置</strong>指配置带外管理IP，以及用户密码等；<br><strong>信息登记</strong>指扫描RFID，并录入以上两部实际完成内容。此步骤完成后，设备已完成纳管，应在CMDB中保存有足够的信息来识别和定位该设备；<br><strong>自动装机</strong>指自动将操作系统部署到目标设备上，并进行初始化，如网络设置，磁盘分配等，这也是整个流程中最为重要的部分；<br><strong>交付</strong>指交付业务系统进行最后的配置，此时系统已经可以使用；  </p>
<a id="more"></a>

<p>网络拓扑：</p>
<p><img src="http://kongluoxing.qiniudn.com/datacenter-lifecycle-topology.png" alt="网络拓扑"></p>
<p><strong> 图解 </strong>
所有服务器都同时连接到管理网和生产网，其中管理口连接到管理网，普通网口连接到生产网，流量分开互不干扰；管理网和生产网亦不共享网络设备，
以保证在生产网故障需要维护时，管理网仍然可用。</p>
<h2 id="各阶段定义">各阶段定义</h2>
<p><img src="http://kongluoxing.qiniudn.com/oob_management_summary.png" alt="总体逻辑图">
机器从上架到交付用户使用后的维护，总体分为三个阶段：</p>
<ol>
<li><strong> 上架 </strong>
上架阶段主要完成机器上架、加电、扫描录入RFID、位置信息、扫描录入序列号、扫描录入MAC地址、网络准备等。
其中RFID储存CI ID，扫描到的序列号和UUID, MAC地址关联到此CI；</li>
<li><strong> 纳管 </strong>
此阶段主要是处理上架时的信息，使相关的信息进行关联，形成完整的管理信息以便机器纳管。上架阶段完成时，由于扫描信息的人员，和设置管理IP地址的可能并不是相同的人，因此需要在这个阶段进行匹配关联，方法是通过管理口采集生产网卡MAC的地址，通过采集到的MAC地址与上架阶段录入的MAC地址进行匹配，然后将管理口IP，管理口MAC，与CI ID，序列号等关联起来，使机器具备纳管条件。</li>
<li><strong> 维护 </strong>
维护阶段已经可以进行各种带外管理，其中包括控制和监控两部分：<ul>
<li>控制：可以执行远程自动装机、远程启停、控制台重定向、BIOS设置等功能。
远程自动装机可以对目标机器安装指定操作系统，指定分区、网络设置、预装的软件包等，可根据业务系统要求定制安装。
控制台重定向可以模拟串口，可实现从机器启动到操作系统启动之间的操作，弥补了以往操作系统出问题只能到现场解决的问题。若对操作系统设置启动参数，还可实现登陆操作系统的功能，可以在操作系统ssh无法连接时提供另一种手段。</li>
<li>监控：带外监控部分用于弥补在操作系统层面无法采集的信息：功耗、温度、风扇转速、硬件告警等。</li>
</ul>
</li>
</ol>
<h2 id="前提条件">前提条件</h2>
<p>要实现完全的服务开通自动化，需要满足以下前提条件：
设备需支持IPMI 1.5或IPMI 2.0规范并带有独立带外管理网口以实现带外管理；
设备需支持PXE以实现网络启动；
设备需同时连接到管理网和生产网；
设备所安装系统应当是完全兼容的，不能有缺少驱动等情况；
在大规模部署中，应在各子网设DHCP中继；</p>
<h1 id="技术实现">技术实现</h1>
<p>为应对数据中心的大量设备的自动化需求，系统采用的实现方案详细如下:</p>
<h2 id="组件及其关联">组件及其关联</h2>
<p>系统由以下组件组成：</p>
<p><strong>装机服务器</strong>是提供自动装机服务的主要服务器，其提供镜像、安装文件分发、设备管理（包括分类管理、规则设置等）等功能；<br><strong>DHCP服务器</strong>是专门用于给目标机器自动分配IP地址的服务器，因冲突域的限制，需要在各子网设DHCP中继才能实现多子网的DHCP功能；<br><strong>控制服务器</strong>是用来收集整理装机服务器的信息，给装机服务器分派指令，与ITSM系统通信，同时也负担带外管理功能等的服务器；<br><strong>ITSM服务器</strong>指现有ITSM系统。  </p>
<h2 id="体系结构">体系结构</h2>
<h3 id="主机对象">主机对象</h3>
<p>一个主机对象的基本信息包括：</p>
<ul>
<li>name：多数时候是系统自动命名的，如node1，node2等，用于方便辨识，但不可作为唯一定位的条件</li>
<li>dhcp_mac：dhcp识别到的MAC地址，也就是连接的生产网口的MAC地址</li>
<li>state：标识是否已安装操作系统</li>
<li>last_checkin：最后一次向服务器汇报状态的时间，参见自动发现的描述</li>
<li>tags：一系列用于将机器归类和方便过滤的标签，例如virtual字段为vmware时，自动添加vmware标签，或者自动将机器的MAC地址作为它的标签</li>
</ul>
<p>此外，被自动发现后，主机将自动上传各种硬件配置信息，这些信息也会保存在主机对象中，详见自动发现章节；对主机对象所做的任何操作，例如开机，都会在主机对象上留下一条日志。</p>
<h3 id="策略">策略</h3>
<p>策略定义了如何给一台或一组服务器安装操作系统，它整合了所有与装机有关的信息，其中包括：</p>
<ul>
<li>仓库(repo)：仓库有两种，一种是存在本地的ISO，另一种是镜像URL，例如163镜像</li>
<li>任务(task)：任务指定了安装何种操作系统，以及安装所用的脚本等</li>
<li>代理(broker)：代理是在操作系统安装完成后所执行的，其作用是安装配置管理系统，如puppet，salt</li>
<li>标签(tags)：策略的执行，是依靠匹配标签来进行的，因此这是一个正则表达式，被这个正则匹配到标签的服务器，将会执行装机任务</li>
<li>其他信息(Misc. info)：例如主机名,root密码等</li>
</ul>
<p>一个策略可以以json的形式存放在磁盘上：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"centos-for-small"</span></span>,</div><div class="line">    "<span class="attribute">repo</span>": <span class="value"><span class="string">"centos-6.4"</span></span>,</div><div class="line">    "<span class="attribute">task</span>": <span class="value"><span class="string">"centos"</span></span>,</div><div class="line">    "<span class="attribute">broker</span>": <span class="value"><span class="string">"noop"</span></span>,</div><div class="line">    "<span class="attribute">enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">hostname</span>": <span class="value"><span class="string">"host${id}.example.com"</span></span>,</div><div class="line">    "<span class="attribute">root_password</span>": <span class="value"><span class="string">"secret"</span></span>,</div><div class="line">    "<span class="attribute">max_count</span>": <span class="value"><span class="number">20</span></span>,</div><div class="line">    "<span class="attribute">tags</span>": <span class="value">[<span class="string">"small"</span>]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="流程">流程</h3>
<p>一台机器从启动到被发现到装机的流程如下：
<img src="http://kongluoxing.qiniudn.com/provisioning_procedure.png" alt="流程">
其中开机可通过结合带外管理来远程实现，以实现全流程的自动化。</p>
<h2 id="自动发现">自动发现</h2>
<p>自动发现的实现机制是，当新上架机器启动后，自动通过PXE连接到装机服务器，然后通过网络启动一个定制的操作系统（microkernel），该操作系统使用最新内核编译，使其能够识别绝大部分硬件，操作系统完全运行在内存中，使其不需要占用硬盘空间，同时它自带一个报告程序，用于定时向装机服务器汇报自身情况，例如：各网卡MAC地址、服务器UUID、是否虚拟化、CPU配置、内存配置、序列号等等。当装机服务器收到数据后，自动将此机器置为已登记状态，ITSM提供界面将发现的机器与在信息登记阶段登记的机器进行关联，此时，机器就具备了完整的配置信息，带内带外的信息以及机房位置信息也全部关联补齐。</p>
<h2 id="设备检测">设备检测</h2>
<p>自动发现可作为检测设备是否完好的一个手段，可以制定流程，规定在设备上架后，必须为其加电开机，开机后系统即可自动发现该主机，以及该主机的配置信息，可据此进行核对。</p>
<h2 id="自动装机">自动装机</h2>
<p>Note：自动装机使用的是pupppetlabs和EMC共同开发的razor，它是开源的，同时也是Puppet Enterprise中的一部分，但其状态还是开发预览版。
自动装机支持主流Linux和Windows，Linux主要是通过红帽的kickstart来实现，可定制磁盘分配策略、网络配置、root密码、安装的软件包等等，同时也支持windows 2012的安装。</p>
<h3 id="针对单一机器的装机流程">针对单一机器的装机流程</h3>
<p>当需要对单一机器进行装机时，创建tag规则，将机器的MAC地址作为一个tag，然后创建一个policy，匹配该tag，当policy创建完成后，机器会立即被重启，此时机器通过网络启动，进入boot_install阶段，然后连接到装机服务器下载镜像进行自动安装，装机完成后，将主机对象的state字段标记为已安装操作系统（installed），在此以后，机器重启将不会再进入boot_install，而会进入到boot_local启动本地硬盘上的操作系统。</p>
<h3 id="批量装机">批量装机</h3>
<p>与单台机器装机唯一不同的是，这批机器需要有一个相同且唯一的tag，可以以日期加序号作为tag，其余与单一机器装机相同。</p>
<h2 id="重装系统">重装系统</h2>
<p>重装系统将删除与该节点关联的策略然后清除installed标记，完成后将机器重启，机器将被重启进microkernel，上传自身信息，然后重新被自动发现，被打上标签和应用策略，最终被重装。</p>
<h3 id="下架">下架</h3>
<p>下架没有特别操作，通过流程，自动从系统中把下架的机器删除即可。</p>
<h2 id="其他集成">其他集成</h2>
<h3 id="IPMI集成">IPMI集成</h3>
<p>通过IPMI实现机器的启停，设置BIOS启动顺序等。</p>
<h3 id="集中配置管理集成">集中配置管理集成</h3>
<p>通过代理（broker）安装集中配置管理工具，安装完成后，即可实现软件统一安装、升级，多机批量操作等功能。
集中配置管理工具拟采用salt。</p>
<h1 id="Q_&amp;_A">Q &amp; A</h1>
<p><span class="label label-danger">Q</span> 用什么唯一标识一台机器？</p>
<p><span class="label label-success">A</span> 每台机器在BIOS里都保存了几个信息：assets_tag, uuid, serial，其中UUID是保证不重的，因此可以用来唯一确定一台机器，
但平常为了方便我们可以用MAC地址来匹配，其缺陷是MAC地址可能被修改，并且更换网卡后MAC地址就变了。</p>
<p><span class="label label-danger">Q</span> 装机完成后，是否需要进行网络变更以防止机器被重装？</p>
<p><span class="label label-success">A</span> 不需要了，因为在主机对象里增加了一个state字段，用于标识是否已安装操作系统，对于已安装系统的主机，会自动从本地硬盘启动。但如果为了杜绝一切可能，可以在装机服务器前端增设反向代理，对其装机指令进行过滤，不允许非法的装机操作。</p>
]]></content>
    <summary type="html">
    <![CDATA[从上架到服务开通到下架，全面描述了数据中心中服务器的生命周期管理。]]>
    
    </summary>
    
      <category term="provisioning" scheme="http://k-research.net/tags/provisioning/"/>
    
      <category term="lifecycle" scheme="http://k-research.net/tags/lifecycle/"/>
    
      <category term="out-of-band" scheme="http://k-research.net/tags/out-of-band/"/>
    
      <category term="datacenter" scheme="http://k-research.net/tags/datacenter/"/>
    
      <category term="razor" scheme="http://k-research.net/tags/razor/"/>
    
      <category term="Provisioning" scheme="http://k-research.net/categories/Provisioning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ipmi笔记]]></title>
    <link href="http://k-research.net/2014/11/11/ipmi/"/>
    <id>http://k-research.net/2014/11/11/ipmi/</id>
    <published>2014-11-11T14:26:42.000Z</published>
    <updated>2014-11-12T08:40:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>wikipedia上是这么介绍ipmi的：<br>The Intelligent Platform Management Interface (IPMI) is a set of computer interface specifications for an autonomous computer subsystem that provides management and monitoring capabilities independently of the host system’s CPU, firmware (BIOS or UEFI) and operating system. IPMI defines a set of interfaces used by system administrators for out-of-band management of computer systems and monitoring of their operation. For example, IPMI provides a way to manage a computer that may be powered off or otherwise unresponsive by using a network connection to the hardware rather than to an operating system or login shell.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1>
<p>wikipedia上是这么介绍ipmi的：<br>The Intelligent Platform Management Interface (IPMI) is a set of computer interface specific]]>
    </summary>
    
      <category term="IPMI" scheme="http://k-research.net/tags/IPMI/"/>
    
      <category term="Linux" scheme="http://k-research.net/tags/Linux/"/>
    
      <category term="Dell" scheme="http://k-research.net/tags/Dell/"/>
    
  </entry>
  
</feed>
